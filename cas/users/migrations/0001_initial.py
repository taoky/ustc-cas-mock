# Generated by Django 3.2.6 on 2021-08-27 06:35

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('gid', models.CharField(max_length=128, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=64)),
                ('name', models.CharField(max_length=64)),
                ('ryzxztdm', models.CharField(choices=[('10', '在校'), ('20', '离校（含校内身份结束）'), ('30', '校内身份转换'), ('40', '离退休'), ('50', '暂时离校（休学/出国等）'), ('99', '其他'), ('91', '证件停用或注销')], default='10', max_length=2)),
                ('ryfldm', models.CharField(choices=[('101010000', '教工-正式编制教学岗'), ('101020000', '教工-正式编制科研岗'), ('101030000', '教工-正式编制管理岗'), ('101040000', '教工-正式编制支撑岗'), ('101ZZ0000', '教工-正式编制其他岗或未明岗'), ('201010000', '学生-正式科学学位博士'), ('201020000', '学生-正式科学学位硕士'), ('201030000', '学生-正式本科'), ('201040000', '学生-正式学生专科'), ('201ZZ0000', '学生-正式学生其他或未知层次'), ('202010000', '学生-专业学位博士'), ('202020000', '学生-专业学位硕士'), ('202ZZ0000', '学生-专业学位其他或未知层次'), ('240030000', '学生-夜大函授培训班本科'), ('240040000', '学生-夜大函数培训班专科'), ('240ZZ0000', '学生-夜大函数培训班其他或未知层次'), ('290ZZ0000', '短期培训学生'), ('2ZZZZ0000', '学生-其他类型学生'), ('300000000', '博士后'), ('901000000', '来访人员-上级部门各种类型来访人员'), ('902000000', '交流访问进修人员'), ('903000000', '来访人员-邀请来的讲座、演出、交流人员'), ('904000000', '来访人员-参加会议人员'), ('905000000', '来访人员-来校参观人员'), ('906000000', '来访人员-学生家长'), ('9ZZ000000', '来访人员-其他来访人员'), ('Z01000000', '教工家属'), ('Z02000000', '附中学生'), ('ZZZ000000', '其他人员'), ('103ZZ0000', '教工-校聘用人员其他岗或未明岗'), ('180ZZ0000', '各单位自聘人员'), ('190ZZ0000', '各单位临时聘用人员'), ('301000000', '校内博士后'), ('309000000', '企业博士后')], default='201030000', max_length=9)),
                ('deptCode', models.CharField(default='123', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
